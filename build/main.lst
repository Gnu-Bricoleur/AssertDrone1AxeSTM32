ARM GAS  /tmp/ccTAsWMc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text._Error_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	_Error_Handler
  23              		.thumb
  24              		.thumb_func
  26              	_Error_Handler:
  27              	.LFB125:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** //SCL -> PB6
   3:Src/main.c    **** //SDA -> PB7
   4:Src/main.c    **** 
   5:Src/main.c    **** //PWM1 -> PA8
   6:Src/main.c    **** //PWM2 -> PA9
   7:Src/main.c    **** 
   8:Src/main.c    **** 
   9:Src/main.c    **** 
  10:Src/main.c    **** /**
  11:Src/main.c    ****   ******************************************************************************
  12:Src/main.c    ****   * @file           : main.c
  13:Src/main.c    ****   * @brief          : Main program body
  14:Src/main.c    ****   ******************************************************************************
  15:Src/main.c    ****   ** This notice applies to any and all portions of this file
  16:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  17:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  18:Src/main.c    ****   * inserted by the user or by software development tools
  19:Src/main.c    ****   * are owned by their respective copyright owners.
  20:Src/main.c    ****   *
  21:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  22:Src/main.c    ****   *
  23:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  24:Src/main.c    ****   * are permitted provided that the following conditions are met:
  25:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  26:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  27:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  28:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  29:Src/main.c    ****   *      and/or other materials provided with the distribution.
  30:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
ARM GAS  /tmp/ccTAsWMc.s 			page 2


  31:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  32:Src/main.c    ****   *      without specific prior written permission.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  36:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  37:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  38:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  39:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  40:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  41:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  42:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  43:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  44:Src/main.c    ****   *
  45:Src/main.c    ****   ******************************************************************************
  46:Src/main.c    ****   */
  47:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  48:Src/main.c    **** #include "main.h"
  49:Src/main.c    **** #include "stm32f4xx_hal.h"
  50:Src/main.c    **** #include "i2c.h"
  51:Src/main.c    **** #include "tim.h"
  52:Src/main.c    **** #include "usart.h"
  53:Src/main.c    **** #include "gpio.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN Includes */
  56:Src/main.c    **** #include "sd_hal_mpu6050.h"
  57:Src/main.c    **** /* USER CODE END Includes */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE BEGIN PV */
  62:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  63:Src/main.c    **** SD_MPU6050 mpu1;
  64:Src/main.c    **** /* USER CODE END PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** void SystemClock_Config(void);
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PFP */
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE BEGIN 0 */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE END 0 */
  77:Src/main.c    **** 
  78:Src/main.c    **** /**
  79:Src/main.c    ****   * @brief  The application entry point.
  80:Src/main.c    ****   *
  81:Src/main.c    ****   * @retval None
  82:Src/main.c    ****   */
  83:Src/main.c    **** int main(void)
  84:Src/main.c    **** {
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
  86:Src/main.c    ****     SD_MPU6050_Result result ;
  87:Src/main.c    **** 	uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
ARM GAS  /tmp/ccTAsWMc.s 			page 3


  88:Src/main.c    ****     uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
  89:Src/main.c    ****     int16_t somme_erreur = 0;
  90:Src/main.c    ****     int16_t delta_erreur = 0;
  91:Src/main.c    ****     int16_t delta_erreur_prec = 0;
  92:Src/main.c    ****     int16_t cmd = 0;
  93:Src/main.c    ****     float kp = 0.02;           // Coefficient proportionnel
  94:Src/main.c    ****     float ki = 0;           // Coefficient intégrateur
  95:Src/main.c    ****     float kd = 0;           // Coefficient dérivateur
  96:Src/main.c    ****     int moteur1 = 0;
  97:Src/main.c    ****     int moteur2 = 0;
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_USART2_UART_Init();
 119:Src/main.c    ****   MX_I2C1_Init();
 120:Src/main.c    ****   MX_TIM1_Init();
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
 122:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 123:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 124:Src/main.c    **** 
 125:Src/main.c    ****   //TEST SEQUENCE DEMARRAGE
 126:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 6000);
 127:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 6000);
 128:Src/main.c    ****     HAL_Delay(4000);
 129:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 130:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 3000);
 131:Src/main.c    ****     HAL_Delay(4000);
 132:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 133:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 3000);
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    **** 
 137:Src/main.c    ****     int i = 2000;
 138:Src/main.c    ****     for (i = 3000; i< 3500; i++)
 139:Src/main.c    ****     {
 140:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 141:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 142:Src/main.c    ****         HAL_Delay(7);
 143:Src/main.c    ****     }
 144:Src/main.c    **** 
ARM GAS  /tmp/ccTAsWMc.s 			page 4


 145:Src/main.c    ****     HAL_Delay(200);
 146:Src/main.c    ****     HAL_UART_Transmit(&huart2, "Attenzion zest partiiii  ....", sizeof("Attenzion zest partiiii  ..
 147:Src/main.c    **** 
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* USER CODE END 2 */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Infinite loop */
 152:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 153:Src/main.c    ****   while (1)
 154:Src/main.c    ****   {
 155:Src/main.c    ****     result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU605
 156:Src/main.c    **** 	  //HAL_Delay(500);
 157:Src/main.c    ****   /* USER CODE END WHILE */
 158:Src/main.c    **** 	  if(result == SD_MPU6050_Result_Ok)
 159:Src/main.c    **** 	  {
 160:Src/main.c    **** 		  //SD_UART_Send(&huart1,mpu_ok,(uint16_t)15);
 161:Src/main.c    ****             //HAL_UART_Transmit(&huart2, mpu_ok, sizeof(mpu_ok), HAL_MAX_DELAY);
 162:Src/main.c    **** 	  }
 163:Src/main.c    **** 	  else
 164:Src/main.c    **** 	  {
 165:Src/main.c    **** 		  //SD_UART_Send(&huart1,mpu_not,(uint16_t)17);
 166:Src/main.c    ****             HAL_UART_Transmit(&huart2, "MPU en PLS", sizeof("MPU en PLS"), HAL_MAX_DELAY);
 167:Src/main.c    **** 	  }
 168:Src/main.c    **** 	  //HAL_Delay(20);
 169:Src/main.c    **** 	  SD_MPU6050_ReadTemperature(&hi2c1,&mpu1);
 170:Src/main.c    **** 	  float temper = mpu1.Temperature;
 171:Src/main.c    **** 	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 172:Src/main.c    **** 	  int16_t g_x = mpu1.Gyroscope_X;
 173:Src/main.c    **** 	  int16_t g_y = mpu1.Gyroscope_Y;
 174:Src/main.c    ****         int16_t g_z = mpu1.Gyroscope_Z;
 175:Src/main.c    **** 
 176:Src/main.c    **** 
 177:Src/main.c    ****       SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 178:Src/main.c    **** 	  int16_t a_x = mpu1.Accelerometer_X;
 179:Src/main.c    **** 	  int16_t a_y = mpu1.Accelerometer_Y;
 180:Src/main.c    ****       int16_t a_z = mpu1.Accelerometer_Z;
 181:Src/main.c    ****       char theIntAsString[7];
 182:Src/main.c    **** 
 183:Src/main.c    **** /*
 184:Src/main.c    ****     sprintf( theIntAsString, "%i", a_y );
 185:Src/main.c    ****     HAL_UART_Transmit(&huart2, theIntAsString, sizeof(theIntAsString),HAL_MAX_DELAY);
 186:Src/main.c    ****     HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 187:Src/main.c    **** */
 188:Src/main.c    **** 
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* USER CODE END WHILE */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* USER CODE BEGIN 3 */
 193:Src/main.c    ****     
 194:Src/main.c    **** 
 195:Src/main.c    ****     // Calcul des erreurs
 196:Src/main.c    ****     int16_t erreur = a_y;
 197:Src/main.c    ****     somme_erreur += erreur;
 198:Src/main.c    ****     delta_erreur = erreur-delta_erreur_prec;
 199:Src/main.c    ****     delta_erreur_prec = delta_erreur;
 200:Src/main.c    ****  
 201:Src/main.c    ****     // PID : calcul de la commande
ARM GAS  /tmp/ccTAsWMc.s 			page 5


 202:Src/main.c    ****     cmd = kp*erreur + ki*somme_erreur + kd*delta_erreur;
 203:Src/main.c    **** 
 204:Src/main.c    **** 
 205:Src/main.c    ****     //HAL_UART_Transmit(&huart2, "coucou", sizeof("coucou"),HAL_MAX_DELAY);
 206:Src/main.c    ****     sprintf( theIntAsString, "%i", cmd );
 207:Src/main.c    ****     HAL_UART_Transmit(&huart2, theIntAsString, sizeof(theIntAsString),HAL_MAX_DELAY);
 208:Src/main.c    ****     HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 209:Src/main.c    **** 
 210:Src/main.c    **** 
 211:Src/main.c    ****     if(cmd>0)
 212:Src/main.c    ****     {
 213:Src/main.c    ****         moteur1 = 3200 + cmd;
 214:Src/main.c    ****         moteur2 = 3200;
 215:Src/main.c    ****     }
 216:Src/main.c    ****     else
 217:Src/main.c    ****     {
 218:Src/main.c    ****         moteur1 = 3200;
 219:Src/main.c    ****         moteur2 = 3200 + abs(cmd);
 220:Src/main.c    ****     }
 221:Src/main.c    **** 
 222:Src/main.c    **** 
 223:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, moteur1);
 224:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, moteur2);
 225:Src/main.c    **** 
 226:Src/main.c    ****   }
 227:Src/main.c    ****   /* USER CODE END 3 */
 228:Src/main.c    **** 
 229:Src/main.c    **** }
 230:Src/main.c    **** 
 231:Src/main.c    **** /**
 232:Src/main.c    ****   * @brief System Clock Configuration
 233:Src/main.c    ****   * @retval None
 234:Src/main.c    ****   */
 235:Src/main.c    **** void SystemClock_Config(void)
 236:Src/main.c    **** {
 237:Src/main.c    **** 
 238:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 239:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 240:Src/main.c    **** 
 241:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 242:Src/main.c    ****     */
 243:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 244:Src/main.c    **** 
 245:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 246:Src/main.c    **** 
 247:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 248:Src/main.c    ****     */
 249:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 250:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 251:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 252:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 253:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 254:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 258:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccTAsWMc.s 			page 6


 259:Src/main.c    ****   {
 260:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 261:Src/main.c    ****   }
 262:Src/main.c    **** 
 263:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 264:Src/main.c    ****     */
 265:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 266:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 267:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 268:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 269:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 270:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 271:Src/main.c    **** 
 272:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 273:Src/main.c    ****   {
 274:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 275:Src/main.c    ****   }
 276:Src/main.c    **** 
 277:Src/main.c    ****     /**Configure the Systick interrupt time 
 278:Src/main.c    ****     */
 279:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 280:Src/main.c    **** 
 281:Src/main.c    ****     /**Configure the Systick 
 282:Src/main.c    ****     */
 283:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 284:Src/main.c    **** 
 285:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 286:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 287:Src/main.c    **** }
 288:Src/main.c    **** 
 289:Src/main.c    **** /* USER CODE BEGIN 4 */
 290:Src/main.c    **** 
 291:Src/main.c    **** /* USER CODE END 4 */
 292:Src/main.c    **** 
 293:Src/main.c    **** /**
 294:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 295:Src/main.c    ****   * @param  file: The file name as string.
 296:Src/main.c    ****   * @param  line: The line in file as a number.
 297:Src/main.c    ****   * @retval None
 298:Src/main.c    ****   */
 299:Src/main.c    **** void _Error_Handler(char *file, int line)
 300:Src/main.c    **** {
  29              		.loc 1 300 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.L2:
 301:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 302:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/ccTAsWMc.s 			page 7


 303:Src/main.c    ****   while(1)
 304:Src/main.c    ****   {
 305:Src/main.c    ****     HAL_UART_Transmit(&huart2, "Alerte, nous avons un code rouge", sizeof("Alerte, nous avons un co
  42              		.loc 1 305 0 discriminator 1
  43 0002 084C     		ldr	r4, .L4
  44 0004 2046     		mov	r0, r4
  45 0006 0849     		ldr	r1, .L4+4
  46 0008 2122     		movs	r2, #33
  47 000a 4FF0FF33 		mov	r3, #-1
  48 000e FFF7FEFF 		bl	HAL_UART_Transmit
  49              	.LVL2:
 306:Src/main.c    ****     HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
  50              		.loc 1 306 0 discriminator 1
  51 0012 2046     		mov	r0, r4
  52 0014 0549     		ldr	r1, .L4+8
  53 0016 0322     		movs	r2, #3
  54 0018 4FF0FF33 		mov	r3, #-1
  55 001c FFF7FEFF 		bl	HAL_UART_Transmit
  56              	.LVL3:
 307:Src/main.c    ****   }
  57              		.loc 1 307 0 discriminator 1
  58 0020 EFE7     		b	.L2
  59              	.L5:
  60 0022 00BF     		.align	2
  61              	.L4:
  62 0024 00000000 		.word	huart2
  63 0028 00000000 		.word	.LC0
  64 002c 24000000 		.word	.LC1
  65              		.cfi_endproc
  66              	.LFE125:
  68              		.section	.text.SystemClock_Config,"ax",%progbits
  69              		.align	2
  70              		.global	SystemClock_Config
  71              		.thumb
  72              		.thumb_func
  74              	SystemClock_Config:
  75              	.LFB124:
 236:Src/main.c    **** 
  76              		.loc 1 236 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 80
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 00B5     		push	{lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 4
  83              		.cfi_offset 14, -4
  84 0002 95B0     		sub	sp, sp, #84
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 88
  87              	.LBB2:
 243:Src/main.c    **** 
  88              		.loc 1 243 0
  89 0004 0023     		movs	r3, #0
  90 0006 0193     		str	r3, [sp, #4]
  91 0008 294A     		ldr	r2, .L10
  92 000a 116C     		ldr	r1, [r2, #64]
  93 000c 41F08051 		orr	r1, r1, #268435456
ARM GAS  /tmp/ccTAsWMc.s 			page 8


  94 0010 1164     		str	r1, [r2, #64]
  95 0012 126C     		ldr	r2, [r2, #64]
  96 0014 02F08052 		and	r2, r2, #268435456
  97 0018 0192     		str	r2, [sp, #4]
  98 001a 019A     		ldr	r2, [sp, #4]
  99              	.LBE2:
 100              	.LBB3:
 245:Src/main.c    **** 
 101              		.loc 1 245 0
 102 001c 0293     		str	r3, [sp, #8]
 103 001e 254A     		ldr	r2, .L10+4
 104 0020 1168     		ldr	r1, [r2]
 105 0022 41F44041 		orr	r1, r1, #49152
 106 0026 1160     		str	r1, [r2]
 107 0028 1268     		ldr	r2, [r2]
 108 002a 02F44042 		and	r2, r2, #49152
 109 002e 0292     		str	r2, [sp, #8]
 110 0030 029A     		ldr	r2, [sp, #8]
 111              	.LBE3:
 249:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 112              		.loc 1 249 0
 113 0032 0221     		movs	r1, #2
 114 0034 0891     		str	r1, [sp, #32]
 250:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 115              		.loc 1 250 0
 116 0036 0122     		movs	r2, #1
 117 0038 0B92     		str	r2, [sp, #44]
 251:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 118              		.loc 1 251 0
 119 003a 1022     		movs	r2, #16
 120 003c 0C92     		str	r2, [sp, #48]
 252:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 121              		.loc 1 252 0
 122 003e 0E91     		str	r1, [sp, #56]
 253:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 123              		.loc 1 253 0
 124 0040 0F93     		str	r3, [sp, #60]
 254:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 125              		.loc 1 254 0
 126 0042 1092     		str	r2, [sp, #64]
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 127              		.loc 1 255 0
 128 0044 4FF4A873 		mov	r3, #336
 129 0048 1193     		str	r3, [sp, #68]
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 130              		.loc 1 256 0
 131 004a 0423     		movs	r3, #4
 132 004c 1293     		str	r3, [sp, #72]
 257:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 133              		.loc 1 257 0
 134 004e 1393     		str	r3, [sp, #76]
 258:Src/main.c    ****   {
 135              		.loc 1 258 0
 136 0050 08A8     		add	r0, sp, #32
 137 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 138              	.LVL4:
 139 0056 20B1     		cbz	r0, .L7
ARM GAS  /tmp/ccTAsWMc.s 			page 9


 260:Src/main.c    ****   }
 140              		.loc 1 260 0
 141 0058 1748     		ldr	r0, .L10+8
 142 005a 4FF48271 		mov	r1, #260
 143 005e FFF7FEFF 		bl	_Error_Handler
 144              	.LVL5:
 145              	.L7:
 265:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 146              		.loc 1 265 0
 147 0062 0F23     		movs	r3, #15
 148 0064 0393     		str	r3, [sp, #12]
 267:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 149              		.loc 1 267 0
 150 0066 0221     		movs	r1, #2
 151 0068 0491     		str	r1, [sp, #16]
 268:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 152              		.loc 1 268 0
 153 006a 0023     		movs	r3, #0
 154 006c 0593     		str	r3, [sp, #20]
 269:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 155              		.loc 1 269 0
 156 006e 4FF48052 		mov	r2, #4096
 157 0072 0692     		str	r2, [sp, #24]
 270:Src/main.c    **** 
 158              		.loc 1 270 0
 159 0074 0793     		str	r3, [sp, #28]
 272:Src/main.c    ****   {
 160              		.loc 1 272 0
 161 0076 03A8     		add	r0, sp, #12
 162 0078 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 163              	.LVL6:
 164 007c 20B1     		cbz	r0, .L8
 274:Src/main.c    ****   }
 165              		.loc 1 274 0
 166 007e 0E48     		ldr	r0, .L10+8
 167 0080 4FF48971 		mov	r1, #274
 168 0084 FFF7FEFF 		bl	_Error_Handler
 169              	.LVL7:
 170              	.L8:
 279:Src/main.c    **** 
 171              		.loc 1 279 0
 172 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 173              	.LVL8:
 174 008c 0B4B     		ldr	r3, .L10+12
 175 008e A3FB0030 		umull	r3, r0, r3, r0
 176 0092 8009     		lsrs	r0, r0, #6
 177 0094 FFF7FEFF 		bl	HAL_SYSTICK_Config
 178              	.LVL9:
 283:Src/main.c    **** 
 179              		.loc 1 283 0
 180 0098 0420     		movs	r0, #4
 181 009a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 182              	.LVL10:
 286:Src/main.c    **** }
 183              		.loc 1 286 0
 184 009e 4FF0FF30 		mov	r0, #-1
 185 00a2 0021     		movs	r1, #0
ARM GAS  /tmp/ccTAsWMc.s 			page 10


 186 00a4 0A46     		mov	r2, r1
 187 00a6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 188              	.LVL11:
 287:Src/main.c    **** 
 189              		.loc 1 287 0
 190 00aa 15B0     		add	sp, sp, #84
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 4
 193              		@ sp needed
 194 00ac 5DF804FB 		ldr	pc, [sp], #4
 195              	.L11:
 196              		.align	2
 197              	.L10:
 198 00b0 00380240 		.word	1073887232
 199 00b4 00700040 		.word	1073770496
 200 00b8 28000000 		.word	.LC2
 201 00bc D34D6210 		.word	274877907
 202              		.cfi_endproc
 203              	.LFE124:
 205              		.section	.text.main,"ax",%progbits
 206              		.align	2
 207              		.global	main
 208              		.thumb
 209              		.thumb_func
 211              	main:
 212              	.LFB123:
  84:Src/main.c    ****   /* USER CODE BEGIN 1 */
 213              		.loc 1 84 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 16
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 218              	.LCFI4:
 219              		.cfi_def_cfa_offset 20
 220              		.cfi_offset 4, -20
 221              		.cfi_offset 5, -16
 222              		.cfi_offset 6, -12
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 87B0     		sub	sp, sp, #28
 226              	.LCFI5:
 227              		.cfi_def_cfa_offset 48
 228              	.LVL12:
 103:Src/main.c    **** 
 229              		.loc 1 103 0
 230 0004 FFF7FEFF 		bl	HAL_Init
 231              	.LVL13:
 110:Src/main.c    **** 
 232              		.loc 1 110 0
 233 0008 FFF7FEFF 		bl	SystemClock_Config
 234              	.LVL14:
 117:Src/main.c    ****   MX_USART2_UART_Init();
 235              		.loc 1 117 0
 236 000c FFF7FEFF 		bl	MX_GPIO_Init
 237              	.LVL15:
 118:Src/main.c    ****   MX_I2C1_Init();
 238              		.loc 1 118 0
ARM GAS  /tmp/ccTAsWMc.s 			page 11


 239 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 240              	.LVL16:
 119:Src/main.c    ****   MX_TIM1_Init();
 241              		.loc 1 119 0
 242 0014 FFF7FEFF 		bl	MX_I2C1_Init
 243              	.LVL17:
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 244              		.loc 1 120 0
 245 0018 FFF7FEFF 		bl	MX_TIM1_Init
 246              	.LVL18:
 122:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 247              		.loc 1 122 0
 248 001c 514D     		ldr	r5, .L20
 249 001e 2846     		mov	r0, r5
 250 0020 0021     		movs	r1, #0
 251 0022 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 252              	.LVL19:
 123:Src/main.c    **** 
 253              		.loc 1 123 0
 254 0026 2846     		mov	r0, r5
 255 0028 0421     		movs	r1, #4
 256 002a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 257              	.LVL20:
 126:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 6000);
 258              		.loc 1 126 0
 259 002e 2B68     		ldr	r3, [r5]
 260 0030 41F27072 		movw	r2, #6000
 261 0034 5A63     		str	r2, [r3, #52]
 127:Src/main.c    ****     HAL_Delay(4000);
 262              		.loc 1 127 0
 263 0036 9A63     		str	r2, [r3, #56]
 128:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 264              		.loc 1 128 0
 265 0038 4FF47A60 		mov	r0, #4000
 266 003c FFF7FEFF 		bl	HAL_Delay
 267              	.LVL21:
 129:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 3000);
 268              		.loc 1 129 0
 269 0040 2B68     		ldr	r3, [r5]
 270 0042 40F6B834 		movw	r4, #3000
 271 0046 5C63     		str	r4, [r3, #52]
 130:Src/main.c    ****     HAL_Delay(4000);
 272              		.loc 1 130 0
 273 0048 9C63     		str	r4, [r3, #56]
 131:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 274              		.loc 1 131 0
 275 004a 4FF47A60 		mov	r0, #4000
 276 004e FFF7FEFF 		bl	HAL_Delay
 277              	.LVL22:
 132:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 3000);
 278              		.loc 1 132 0
 279 0052 2B68     		ldr	r3, [r5]
 280 0054 5C63     		str	r4, [r3, #52]
 133:Src/main.c    **** 
 281              		.loc 1 133 0
 282 0056 9C63     		str	r4, [r3, #56]
 283              	.LVL23:
ARM GAS  /tmp/ccTAsWMc.s 			page 12


 138:Src/main.c    ****     {
 284              		.loc 1 138 0
 285 0058 07E0     		b	.L13
 286              	.LVL24:
 287              	.L14:
 140:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 288              		.loc 1 140 0 discriminator 3
 289 005a 424B     		ldr	r3, .L20
 290 005c 1B68     		ldr	r3, [r3]
 291 005e 5C63     		str	r4, [r3, #52]
 141:Src/main.c    ****         HAL_Delay(7);
 292              		.loc 1 141 0 discriminator 3
 293 0060 9C63     		str	r4, [r3, #56]
 142:Src/main.c    ****     }
 294              		.loc 1 142 0 discriminator 3
 295 0062 0720     		movs	r0, #7
 296 0064 FFF7FEFF 		bl	HAL_Delay
 297              	.LVL25:
 138:Src/main.c    ****     {
 298              		.loc 1 138 0 discriminator 3
 299 0068 0134     		adds	r4, r4, #1
 300              	.LVL26:
 301              	.L13:
 138:Src/main.c    ****     {
 302              		.loc 1 138 0 is_stmt 0 discriminator 1
 303 006a 40F6AB53 		movw	r3, #3499
 304 006e 9C42     		cmp	r4, r3
 305 0070 F3DD     		ble	.L14
 145:Src/main.c    ****     HAL_UART_Transmit(&huart2, "Attenzion zest partiiii  ....", sizeof("Attenzion zest partiiii  ..
 306              		.loc 1 145 0 is_stmt 1
 307 0072 C820     		movs	r0, #200
 308 0074 FFF7FEFF 		bl	HAL_Delay
 309              	.LVL27:
 146:Src/main.c    **** 
 310              		.loc 1 146 0
 311 0078 3B48     		ldr	r0, .L20+4
 312 007a 3C49     		ldr	r1, .L20+8
 313 007c 1E22     		movs	r2, #30
 314 007e 4FF0FF33 		mov	r3, #-1
 315 0082 FFF7FEFF 		bl	HAL_UART_Transmit
 316              	.LVL28:
  91:Src/main.c    ****     int16_t cmd = 0;
 317              		.loc 1 91 0
 318 0086 0026     		movs	r6, #0
  89:Src/main.c    ****     int16_t delta_erreur = 0;
 319              		.loc 1 89 0
 320 0088 3546     		mov	r5, r6
 321              	.LVL29:
 322              	.L18:
 323              	.LBB4:
 155:Src/main.c    **** 	  //HAL_Delay(500);
 324              		.loc 1 155 0
 325 008a 0023     		movs	r3, #0
 326 008c 0093     		str	r3, [sp]
 327 008e 3848     		ldr	r0, .L20+12
 328 0090 3849     		ldr	r1, .L20+16
 329 0092 1A46     		mov	r2, r3
ARM GAS  /tmp/ccTAsWMc.s 			page 13


 330 0094 FFF7FEFF 		bl	SD_MPU6050_Init
 331              	.LVL30:
 158:Src/main.c    **** 	  {
 332              		.loc 1 158 0
 333 0098 30B1     		cbz	r0, .L15
 166:Src/main.c    **** 	  }
 334              		.loc 1 166 0
 335 009a 3348     		ldr	r0, .L20+4
 336              	.LVL31:
 337 009c 3649     		ldr	r1, .L20+20
 338 009e 0B22     		movs	r2, #11
 339 00a0 4FF0FF33 		mov	r3, #-1
 340 00a4 FFF7FEFF 		bl	HAL_UART_Transmit
 341              	.LVL32:
 342              	.L15:
 169:Src/main.c    **** 	  float temper = mpu1.Temperature;
 343              		.loc 1 169 0
 344 00a8 314F     		ldr	r7, .L20+12
 345 00aa 324C     		ldr	r4, .L20+16
 346 00ac 3846     		mov	r0, r7
 347 00ae 2146     		mov	r1, r4
 348 00b0 FFF7FEFF 		bl	SD_MPU6050_ReadTemperature
 349              	.LVL33:
 171:Src/main.c    **** 	  int16_t g_x = mpu1.Gyroscope_X;
 350              		.loc 1 171 0
 351 00b4 3846     		mov	r0, r7
 352 00b6 2146     		mov	r1, r4
 353 00b8 FFF7FEFF 		bl	SD_MPU6050_ReadGyroscope
 354              	.LVL34:
 177:Src/main.c    **** 	  int16_t a_x = mpu1.Accelerometer_X;
 355              		.loc 1 177 0
 356 00bc 3846     		mov	r0, r7
 357 00be 2146     		mov	r1, r4
 358 00c0 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 359              	.LVL35:
 179:Src/main.c    ****       int16_t a_z = mpu1.Accelerometer_Z;
 360              		.loc 1 179 0
 361 00c4 E389     		ldrh	r3, [r4, #14]
 362              	.LVL36:
 197:Src/main.c    ****     delta_erreur = erreur-delta_erreur_prec;
 363              		.loc 1 197 0
 364 00c6 9AB2     		uxth	r2, r3
 365 00c8 1544     		add	r5, r5, r2
 366              	.LVL37:
 367 00ca ADB2     		uxth	r5, r5
 368              	.LVL38:
 198:Src/main.c    ****     delta_erreur_prec = delta_erreur;
 369              		.loc 1 198 0
 370 00cc 961B     		subs	r6, r2, r6
 371              	.LVL39:
 372 00ce B6B2     		uxth	r6, r6
 373              	.LVL40:
 202:Src/main.c    **** 
 374              		.loc 1 202 0
 375 00d0 1BB2     		sxth	r3, r3
 376 00d2 07EE103A 		fmsr	s14, r3	@ int
 377 00d6 B8EEC77A 		fsitos	s14, s14
ARM GAS  /tmp/ccTAsWMc.s 			page 14


 378 00da DFED286A 		flds	s13, .L20+24
 379 00de 67EE266A 		fmuls	s13, s14, s13
 380 00e2 2BB2     		sxth	r3, r5
 381              	.LVL41:
 382 00e4 07EE103A 		fmsr	s14, r3	@ int
 383 00e8 B8EEC77A 		fsitos	s14, s14
 384 00ec 9FED246A 		flds	s12, .L20+28
 385 00f0 27EE067A 		fmuls	s14, s14, s12
 386 00f4 36EE877A 		fadds	s14, s13, s14
 387 00f8 33B2     		sxth	r3, r6
 388 00fa 07EE903A 		fmsr	s15, r3	@ int
 389 00fe F8EEE77A 		fsitos	s15, s15
 390 0102 67EE867A 		fmuls	s15, s15, s12
 391 0106 77EE277A 		fadds	s15, s14, s15
 392 010a FDEEE77A 		ftosizs	s15, s15
 393              	.LVL42:
 206:Src/main.c    ****     HAL_UART_Transmit(&huart2, theIntAsString, sizeof(theIntAsString),HAL_MAX_DELAY);
 394              		.loc 1 206 0
 395 010e CDED037A 		fsts	s15, [sp, #12]	@ int
 396 0112 BDF90C40 		ldrsh	r4, [sp, #12]
 397 0116 04A8     		add	r0, sp, #16
 398 0118 1A49     		ldr	r1, .L20+32
 399 011a 2246     		mov	r2, r4
 400              	.LVL43:
 401 011c FFF7FEFF 		bl	sprintf
 402              	.LVL44:
 207:Src/main.c    ****     HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 403              		.loc 1 207 0
 404 0120 114F     		ldr	r7, .L20+4
 405 0122 3846     		mov	r0, r7
 406 0124 04A9     		add	r1, sp, #16
 407 0126 0722     		movs	r2, #7
 408 0128 4FF0FF33 		mov	r3, #-1
 409 012c FFF7FEFF 		bl	HAL_UART_Transmit
 410              	.LVL45:
 208:Src/main.c    **** 
 411              		.loc 1 208 0
 412 0130 3846     		mov	r0, r7
 413 0132 1549     		ldr	r1, .L20+36
 414 0134 0322     		movs	r2, #3
 415 0136 4FF0FF33 		mov	r3, #-1
 416 013a FFF7FEFF 		bl	HAL_UART_Transmit
 417              	.LVL46:
 211:Src/main.c    ****     {
 418              		.loc 1 211 0
 419 013e 002C     		cmp	r4, #0
 420 0140 04DD     		ble	.L16
 213:Src/main.c    ****         moteur2 = 3200;
 421              		.loc 1 213 0
 422 0142 04F54864 		add	r4, r4, #3200
 423              	.LVL47:
 214:Src/main.c    ****     }
 424              		.loc 1 214 0
 425 0146 4FF44862 		mov	r2, #3200
 426 014a 06E0     		b	.L17
 427              	.LVL48:
 428              	.L16:
ARM GAS  /tmp/ccTAsWMc.s 			page 15


 429              	.LBB5:
 219:Src/main.c    ****     }
 430              		.loc 1 219 0
 431 014c 002C     		cmp	r4, #0
 432 014e B8BF     		it	lt
 433 0150 6442     		rsblt	r4, r4, #0
 434 0152 04F54862 		add	r2, r4, #3200
 435              	.LVL49:
 218:Src/main.c    ****         moteur2 = 3200 + abs(cmd);
 436              		.loc 1 218 0
 437 0156 4FF44864 		mov	r4, #3200
 438              	.LVL50:
 439              	.L17:
 440              	.LBE5:
 223:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, moteur2);
 441              		.loc 1 223 0
 442 015a 024B     		ldr	r3, .L20
 443 015c 1B68     		ldr	r3, [r3]
 444 015e 5C63     		str	r4, [r3, #52]
 224:Src/main.c    **** 
 445              		.loc 1 224 0
 446 0160 9A63     		str	r2, [r3, #56]
 447              	.LBE4:
 226:Src/main.c    ****   /* USER CODE END 3 */
 448              		.loc 1 226 0
 449 0162 92E7     		b	.L18
 450              	.L21:
 451              		.align	2
 452              	.L20:
 453 0164 00000000 		.word	htim1
 454 0168 00000000 		.word	huart2
 455 016c 34000000 		.word	.LC3
 456 0170 00000000 		.word	hi2c1
 457 0174 00000000 		.word	mpu1
 458 0178 54000000 		.word	.LC4
 459 017c 0AD7A33C 		.word	1017370378
 460 0180 00000000 		.word	0
 461 0184 60000000 		.word	.LC5
 462 0188 24000000 		.word	.LC1
 463              		.cfi_endproc
 464              	.LFE123:
 466              		.comm	mpu1,28,4
 467              		.section	.rodata.str1.4,"aMS",%progbits,1
 468              		.align	2
 469              	.LC0:
 470 0000 416C6572 		.ascii	"Alerte, nous avons un code rouge\000"
 470      74652C20 
 470      6E6F7573 
 470      2061766F 
 470      6E732075 
 471 0021 000000   		.space	3
 472              	.LC1:
 473 0024 0D0A00   		.ascii	"\015\012\000"
 474 0027 00       		.space	1
 475              	.LC2:
 476 0028 5372632F 		.ascii	"Src/main.c\000"
 476      6D61696E 
ARM GAS  /tmp/ccTAsWMc.s 			page 16


 476      2E6300
 477 0033 00       		.space	1
 478              	.LC3:
 479 0034 41747465 		.ascii	"Attenzion zest partiiii  ....\000"
 479      6E7A696F 
 479      6E207A65 
 479      73742070 
 479      61727469 
 480 0052 0000     		.space	2
 481              	.LC4:
 482 0054 4D505520 		.ascii	"MPU en PLS\000"
 482      656E2050 
 482      4C5300
 483 005f 00       		.space	1
 484              	.LC5:
 485 0060 256900   		.ascii	"%i\000"
 486              		.text
 487              	.Letext0:
 488              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 489              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 490              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 491              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 492              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 493              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 494              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 495              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 496              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 497              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 498              		.file 12 "Src/sd_hal_mpu6050.h"
 499              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 500              		.file 14 "Inc/i2c.h"
 501              		.file 15 "Inc/tim.h"
 502              		.file 16 "Inc/usart.h"
 503              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 504              		.file 18 "/usr/include/newlib/stdio.h"
 505              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 506              		.file 20 "Inc/gpio.h"
 507              		.file 21 "<built-in>"
ARM GAS  /tmp/ccTAsWMc.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTAsWMc.s:21     .text._Error_Handler:0000000000000000 $t
     /tmp/ccTAsWMc.s:26     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccTAsWMc.s:62     .text._Error_Handler:0000000000000024 $d
     /tmp/ccTAsWMc.s:69     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTAsWMc.s:74     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTAsWMc.s:198    .text.SystemClock_Config:00000000000000b0 $d
     /tmp/ccTAsWMc.s:206    .text.main:0000000000000000 $t
     /tmp/ccTAsWMc.s:211    .text.main:0000000000000000 main
     /tmp/ccTAsWMc.s:453    .text.main:0000000000000164 $d
                            *COM*:000000000000001c mpu1
     /tmp/ccTAsWMc.s:468    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart2
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
MX_I2C1_Init
MX_TIM1_Init
HAL_TIM_PWM_Start
HAL_Delay
SD_MPU6050_Init
SD_MPU6050_ReadTemperature
SD_MPU6050_ReadGyroscope
SD_MPU6050_ReadAccelerometer
sprintf
htim1
hi2c1
